;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = d1_mini
; default_envs = d1_mini_OTA
; default_envs = d1_mini_pro
; default_envs = lolin_d32_pro
; default_envs = lolin_d32_pro_OTA
; default_envs = mhetesp32minikit

[common_env_data]
framework = arduino
; For USB update:
; upload_port=COM4

; For OTA update:
; Uncoment the upload protocol and select the port target
; upload_protocol = espota
; upload_port = iotdevice

;  To select ota password and port:
; upload_flags =
;     --auth=otapwd
;     --port=8266

; upload_port = IoLed.local
; upload_port = 192.168.1.242
; upload_port = iotbutton.lan

monitor_speed = 115200
upload_speed = 921600

; To configure esp8266 flash memory as 4M (3M SPIFFS):
; board_build.ldscript = eagle.flash.4m3m.ld

; lib_ldf_mode = deep+
lib_deps_base =
  FS
  WiFiClientSecure

  ; // Using AsyncWebServer LinkedList lib can not be used because there is a class
  ; // using the same name. For that reason, for now we use SimpleList until we fix
  ; // this using namespace for example.
  ; ivanseidel/LinkedList @ 0.0.0-alpha+sha.dac3874d28
  https://github.com/spacehuhn/SimpleList

  PubSubClient
  ArduinoJson@>=6
  links2004/WebSockets @ ^2.3.2
  ESP8266FtpServer
  ; ESP8266_SSD1306
  thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays @ ^4.2.0
  ; me-no-dev/ESP Async WebServer @ ^1.2.3 ; Until PR is not solved, use this other
  https://github.com/paclema/ESPAsyncWebServer.git#redefine-DYNAMIC_JSON_DOCUMENT_SIZE

  ArduinoOTA

  sparkfun/SparkFun SCD30 Arduino Library @ ^1.0.12
  mikalhart/TinyGPSPlus @ ^1.0.2
  plerup/EspSoftwareSerial @ ^6.12.7

lib_deps_base_esp8266 =
  ESP8266WiFi
  ; ESP8266WiFiMulti
  ESP8266WebServer
  ESPAsyncTCP
  ESP8266mDNS

lib_deps_base_esp32 =
  Wifi
  ; WiFiMulti
  WebServer
  AsyncTCP
  ESPmDNS


build_flags =
  -w                          ; To remove compilation warnings
  -D USE_ASYNC_WEBSERVER      ; To use Async webserver defining cpp files:

  -D CONFIG_JSON_SIZE=4096    ; To define WebConfigServer max config.json size

  ; -D ENABLE_SERIAL_DEBUG      ; To enable Serial debug
  ; -D DEBUG_ESP_CORE         ; More debug levels here: https://docs.platformio.org/en/latest/platforms/espressif8266.html#debug-level
  ; -DDEBUG_ESP_WIFI
  ; -DDEBUG_ESP_OTA



[env:d1_mini]
platform = espressif8266
framework = ${common_env_data.framework}
board = d1_mini
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
; lib_ldf_mode = ${common_env_data.lib_ldf_mode}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_base_esp8266}

build_flags = ${common_env_data.build_flags}


[env:d1_mini_OTA]
platform = espressif8266
framework = ${common_env_data.framework}
board = d1_mini
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
; lib_ldf_mode = ${common_env_data.lib_ldf_mode}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_base_esp8266}

upload_protocol = espota
upload_port = iotdevice
upload_flags =
  --port=8266

build_flags = ${common_env_data.build_flags}


[env:d1_mini_pro]
platform = espressif8266
framework = ${common_env_data.framework}
board = d1_mini_pro
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
; lib_ldf_mode = ${common_env_data.lib_ldf_mode}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_base_esp8266}

build_flags =
  ${common_env_data.build_flags}
  ; -Wl,-Teagle.flash.16m14m.ld

; For now we can use only the half of the 16MB with this partition schema:
board_build.ldscript = eagle.flash.8m6m.ld


[env:lolin_d32_pro]
platform = espressif32
board = lolin_d32
framework = ${common_env_data.framework}
board_build.mcu = esp32
board_build.f_cpu = 240000000L
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
; lib_ldf_mode = ${common_env_data.lib_ldf_mode}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_base_esp32}

build_flags =
  ${common_env_data.build_flags}
  -DBOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue
  -D USE_ASYNC_WEBSERVER

board_build.partitions = ./board_partitions/esp32/default_16MB.csv
; board_build.partitions = ./board_partitions/esp32/default.csv


[env:lolin_d32_pro_OTA]
platform = espressif32
board = lolin_d32
framework = ${common_env_data.framework}
board_build.mcu = esp32
board_build.f_cpu = 240000000L
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
; lib_ldf_mode = ${common_env_data.lib_ldf_mode}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_base_esp32}

upload_protocol = espota
upload_port = iotdevice
upload_flags =
  --port=3232

build_flags =
  ${common_env_data.build_flags}
  -DBOARD_HAS_PSRAM
  -mfix-esp32-psram-cache-issue
  -D USE_ASYNC_WEBSERVER

board_build.partitions = ./board_partitions/esp32/default_16MB.csv
; board_build.partitions = ./board_partitions/esp32/default.csv


[env:mhetesp32minikit]
platform = espressif32
board = mhetesp32minikit
framework = ${common_env_data.framework}
platform_packages =
  ; framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#master
  framework-arduinoespressif32 @ https://github.com/paclema/arduino-esp32#lwip_enabled
  toolchain-xtensa32@2.80400  ; LWIP needs toolchain-xtensa32 >= v8.4.0
board_build.mcu = esp32
board_build.f_cpu = 240000000L
monitor_speed = ${common_env_data.monitor_speed}
upload_speed = ${common_env_data.upload_speed}
upload_port = COM5
; lib_ldf_mode = ${common_env_data.lib_ldf_mode}
lib_deps =
  ${common_env_data.lib_deps_base}
  ${common_env_data.lib_deps_base_esp32}

build_flags =
  ${common_env_data.build_flags}
  -D USE_ASYNC_WEBSERVER
  ; -D CORE_DEBUG_LEVEL=5     ;To enable ESP32 core debug
